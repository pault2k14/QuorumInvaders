use Libraries.Game.Game
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Label
use Libraries.Game.Layer2D
use Libraries.Compute.Vector2
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Sound.Audio
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Interface.Item2D
use Libraries.Compute.Random
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Sound.Audio
use Libraries.System.File
use Libraries.Game.Graphics.ImageSheet

/* ToDo
   - Reorganize code to be more readable and reusable
   - Add accerlation to player movement
   - Give player an additional ship every 1000 points
   - Add increasing difficulty with each wave of enemies
       - Enemies shoot more frequently
       - Enemies move faster down the screen and left to right
   - Add left to right movement for enemies
   - Add UFO going left to right at random interval
   - Add movement animations to enemies
*/

/*
    This is a default class for creating a game in Quorum. Note that the Main 
    action begins by calling StartGame(), which loads a window a game can 
    be displayed in. The action CreateGame is where the game should load any 
    assets, like images to be displayed, frames of animation, or sounds to be
    played. 
*/
class Main is Game, KeyboardListener, CollisionListener2D
    number totalSeconds = 0.0
    number nextMoveSecs = 10.0
    number explosionSecs = 0.0
    boolean activeExplosion = false
    integer shipsRemainingInt = 3
    Label shipsRemainingLabel
    integer scoreInt = 0
    integer activePlayerProjectileCount = 0
    Label scoreLabel
    Drawable player
    boolean leftDown = false
    boolean rightDown = false
    boolean gameOver = false
    boolean instructionsShown = false
    Array<Drawable> rowOne
    Array<Drawable> rowTwo
    Array<Drawable> rowThree
    Array<Layer2D> layers
    Audio laserAudio
    File laserAudioFile
    Audio explosionAudio
    File explosionAudioFile
    Audio bgMusicAudio
    File bgMusicAudioFile

    action Main
        StartGame()
    end

    /*
        This action sets up the default values for a game. For example, we might
        use the Libraries.Game.Graphics.Drawable class to load up an image or 
        a shape. Or, we might add a Libraries.Interface.Button for making something clickable
        or a Libraries.Interface.TextBox for gathering user input in a game.
    */
    action CreateGame
        EnablePhysics2D(true)

        Layer2D background
        background:SetName("background")
        AddLayer(background)
        Layer2D foreground
        foreground:EnablePhysics(true)
        foreground:AddCollisionListener(me)

        foreground:SetName("foreground")
        AddLayer(foreground)
        layers:Add(background)
        layers:Add(foreground)
        
        Drawable backgroundImage
        backgroundImage:Load("assets/starfield3.png")
        background:Add(backgroundImage)
        laserAudioFile:SetPath("assets/laser1.wav")
        laserAudio:Load(laserAudioFile)
        explosionAudioFile:SetPath("assets/explosion.wav")
        explosionAudio:Load(explosionAudioFile)
        bgMusicAudioFile:SetPath("assets/space-invaders.wav")
        bgMusicAudio:Load(bgMusicAudioFile)
        bgMusicAudio:SetVolume(0.5)
        bgMusicAudio:EnableLooping()
        bgMusicAudio:Play()

        ShowInstructions()

        AddKeyboardListener(me)
        AddCollisionListener(me)
    end

    action SetupBoard()
        Layer2D foreground = layers:Get(1)
        Color color
        color:SetColor(255, 255, 255, 255)
        shipsRemainingLabel:SetText("Ships Remaining: " + shipsRemainingInt)
        shipsRemainingLabel:SetFontSize(24)   
        shipsRemainingLabel:SetFontColor(color)   
        shipsRemainingLabel:SetPosition(50, 550)
        foreground:Add(shipsRemainingLabel)

        scoreLabel:SetText("Score: " + scoreInt)
        scoreLabel:SetFontSize(24)   
        scoreLabel:SetFontColor(color)   
        scoreLabel:SetPosition(600, 550)
        foreground:Add(scoreLabel)
        
        integer xPos = 25
        repeat 10 times
            CreateEnemyForRow(foreground, rowThree, "assets/spaceship.png",
                                xPos, 500)
            CreateEnemyForRow(foreground, rowTwo, "assets/spaceship5.png",
                                xPos, 450)
            CreateEnemyForRow(foreground, rowOne, "assets/spaceship7.png",
                                xPos, 400)
            xPos = xPos + 75
        end

        player:Load("assets/Spaceship4.png")  
        foreground:Add(player)    
        player:SetPosition(50, 50)
        player:SetCollidable(true)
        player:SetName("player")

        CreateBarrier(50)
        CreateBarrier(350)
        CreateBarrier(650)
        CreateInvisibleBarrier(0)
    end

    action ShowInstructions()
        Layer2D foreground = layers:Get(1)
        Label nameLabel
        Color whiteColor
        whiteColor:SetColor(255, 255, 255, 255)

        Color goldColor
        goldColor:SetColor(215, 215, 0, 255)

        nameLabel:SetText("Quorum Invaders")
        nameLabel:SetName("nameLabel")
        nameLabel:SetFontSize(36)
        nameLabel:SetFontColor(goldColor)   
        nameLabel:SetPosition(150, 400)
        foreground:Add(nameLabel)

        Label instructionsLabel
        instructionsLabel:SetText("Press A to move left, D to move right, and SPACE to fire.")
        instructionsLabel:SetName("instructionsLabel")
        instructionsLabel:SetFontSize(24)   
        instructionsLabel:SetFontColor(whiteColor)   
        instructionsLabel:SetPosition(150, 350)
        foreground:Add(instructionsLabel)

        Label instructionsTwoLabel
        instructionsTwoLabel:SetText("Press SPACE to continue.")
        instructionsTwoLabel:SetName("instructionsTwoLabel")
        instructionsTwoLabel:SetFontSize(24)   
        instructionsTwoLabel:SetFontColor(whiteColor)   
        instructionsTwoLabel:SetPosition(150, 300)
        foreground:Add(instructionsTwoLabel)
        instructionsShown = true
    end

    action AddGameOver()
        Layer2D foreground = layers:Get(1)
        Label gameOverLabel
        Label gameOverTwoLabel
        Color whiteColor
        whiteColor:SetColor(255, 255, 255, 255)

        gameOverLabel:SetText("Game Over!")
        gameOverLabel:SetName("gameOverOneLabel")
        gameOverLabel:SetFontSize(36)
        gameOverLabel:SetFontColor(whiteColor)   
        gameOverLabel:SetPosition(150, 400)
        foreground:Add(gameOverLabel)

        gameOverTwoLabel:SetText("Press R to restart or Q to quit.")
        gameOverTwoLabel:SetName("gameOverTwoLabel")
        gameOverTwoLabel:SetFontSize(36)
        gameOverTwoLabel:SetFontColor(whiteColor)   
        gameOverTwoLabel:SetPosition(150, 350)
        foreground:Add(gameOverTwoLabel)
        gameOver = true
    end

    action ClearForeground()
        Layer2D foreground = layers:Get(1)
        
        integer i = 0

        repeat while foreground:GetSize() > 0
            foreground:RemoveFromEnd()
        end
    end

    action CreateEnemyForRow(Layer2D layer, Array<Drawable> enemyRow,
                        text iconPath, integer xPos, integer yPos) returns Array<Drawable>
            JavaScriptObjectNotation explodingJson
            explodingJson:Add("data", false)
            JavaScriptObjectNotation explodingTimeJson
            explodingTimeJson:Add("data", 0.0)
            JavaScriptObjectNotation activeJson
            activeJson:Add("data", true)
            Drawable enemy
            enemy:Load(iconPath)  
            enemy:SetPosition(xPos, yPos)
            enemy:SetCollidable(true)
            enemy:Scale(0.75)
            enemy:SetRotation(180)
            enemy:SetName("enemy")
            enemy:SetProperty("active", activeJson)
            enemy:SetProperty("exploding", explodingJson)
            enemy:SetProperty("explodingTime", explodingTimeJson)
            layer:Add(enemy)
            enemyRow:Add(enemy)
        return enemyRow
    end

   /*
   This is the action that gets called automatically by the game engine when
   a collision begins between two collidable items. We are passed an item
   that represents the event of the collision. From that item we can get the
   items that are colliding.
   */
   action BeginCollision(CollisionEvent2D event)

       // Next, we want to get our items out of the collision event
       Drawable itemA = cast(Drawable, event:GetItemA())
       Drawable itemB = cast(Drawable, event:GetItemB())
       Layer2D foreground = layers:Get(1)
       
       if itemA:GetName() = "enemy" and itemB:GetName() = "playerProjectile"
            foreground:Remove(itemB)
            JavaScriptObjectNotation activeJson
            activeJson:Add("data", false) 
            itemA:SetProperty("active", activeJson)
            itemB:SetProperty("active", activeJson)
            JavaScriptObjectNotation enemyExplodingJson
            enemyExplodingJson:Add("data", true)
            itemA:SetProperty("exploding", enemyExplodingJson)
            itemA:SetCollidable(false)
            activePlayerProjectileCount = activePlayerProjectileCount - 1
            scoreInt = scoreInt + 10
            scoreLabel:SetText("Score: " + scoreInt)
            explosionAudio:Play()
       elseif itemA:GetName() = "playerProjectile" and itemB:GetName() = "enemy"
            foreground:Remove(itemA)
            JavaScriptObjectNotation activeJson
            activeJson:Add("data", false) 
            itemA:SetProperty("active", activeJson)
            itemB:SetProperty("active", activeJson)
            JavaScriptObjectNotation enemyExplodingJson
            enemyExplodingJson:Add("data", true)
            itemB:SetProperty("exploding", enemyExplodingJson)
            itemB:SetCollidable(false)
            activePlayerProjectileCount = activePlayerProjectileCount - 1
            scoreInt = scoreInt + 10
            scoreLabel:SetText("Score: " + scoreInt)
            explosionAudio:Play()
       elseif itemA:GetName() = "player" and itemB:GetName() = "projectile"
            foreground:Remove(itemB)
            shipsRemainingInt = shipsRemainingInt - 1
            shipsRemainingLabel:SetText("Ships Remaining: " + shipsRemainingInt)
            explosionAudio:Play()
            activeExplosion = true
            explosionSecs = 0.0
       elseif itemA:GetName() = "projectile" and itemB:GetName() = "player"
            foreground:Remove(itemA)
            shipsRemainingInt = shipsRemainingInt - 1
            shipsRemainingLabel:SetText("Ships Remaining: " + shipsRemainingInt)
            explosionAudio:Play()
            activeExplosion = true
            explosionSecs = 0.0
       elseif itemA:GetName() = "projectile" and itemB:GetName() = "playerProjectile"
            or itemA:GetName() = "playerProjectile" and itemB:GetName() = "projectile"
            foreground:Remove(itemA)
            foreground:Remove(itemB)
            activePlayerProjectileCount = activePlayerProjectileCount - 1
       elseif itemA:GetName() = "enemy" and itemB:GetName() = "player"
            JavaScriptObjectNotation activeJson
            activeJson:Add("data", false) 
            itemA:SetProperty("active", activeJson)
            foreground:Remove(itemA)
            shipsRemainingInt = shipsRemainingInt - 1
            shipsRemainingLabel:SetText("Ships Remaining: " + shipsRemainingInt)
            explosionAudio:Play()
            activeExplosion = true
            explosionSecs = 0.0
       elseif itemA:GetName() = "player" and itemB:GetName() = "enemy"
            JavaScriptObjectNotation activeJson
            activeJson:Add("data", false) 
            itemB:SetProperty("active", activeJson)
            foreground:Remove(itemB)
            shipsRemainingInt = shipsRemainingInt - 1
            shipsRemainingLabel:SetText("Ships Remaining: " + shipsRemainingInt)
            explosionAudio:Play()
            activeExplosion = true
            explosionSecs = 0.0
       elseif itemA:GetName() = "barrier" and itemB:GetName() = "projectile" or
            itemA:GetName() = "projectile" and itemB:GetName() = "barrier" 
            foreground:Remove(itemA)
            foreground:Remove(itemB)
       elseif itemA:GetName() = "barrier" and itemB:GetName() = "playerProjectile" or
            itemA:GetName() = "playerProjectile" and itemB:GetName() = "barrier"
            foreground:Remove(itemA)
            foreground:Remove(itemB)
            activePlayerProjectileCount = activePlayerProjectileCount - 1
       elseif itemA:GetName() = "enemy" and itemB:GetName() = "barrier"
            foreground:Remove(itemB)    
       elseif itemA:GetName() = "barrier" and itemB:GetName() = "enemy"
            foreground:Remove(itemA)
       elseif itemA:GetName() = "invisibleBarrier" and itemB:GetName() = "projectile" 
            foreground:Remove(itemB)
       elseif itemA:GetName() = "projectile" and itemB:GetName() = "invisibleBarrier"
            foreground:Remove(itemA)
       elseif itemA:GetName() = "invisibleBarrier" and itemB:GetName() = "playerProjectile" 
            foreground:Remove(itemB)
            activePlayerProjectileCount = activePlayerProjectileCount - 1
       elseif itemA:GetName() = "invisibleBarrier" and itemB:GetName() = "enemy" 
            or itemA:GetName() = "enemy" and itemB:GetName() = "invisibleBarrier" 
            shipsRemainingInt = 0
            shipsRemainingLabel:SetText("Ships Remaining: " + shipsRemainingInt)            
       elseif itemA:GetName() = "playerProjectile" and itemB:GetName() = "invisibleBarrier"
            foreground:Remove(itemA)
            activePlayerProjectileCount = activePlayerProjectileCount - 1    
       end
    end

    action CreateBarrier(integer xPos)
        Layer2D foreground = layers:Get(1)

        integer yPos = 225
        integer xTemp = xPos

        barrierWidth = 3
        barrierOffset = xPos + 35

        repeat 8 times
            xTemp = barrierOffset                                  
            repeat barrierWidth times
                Drawable square = CreateBarrierBlock(xTemp, yPos)
                foreground:Add(square)
                xTemp = xTemp + 5 
            end
            barrierOffset = barrierOffset - 5
            yPos = yPos - 5
            barrierWidth = barrierWidth + 2
        end
 
    end

    action CreateBarrierBlock(integer xPos, integer yPos) returns Drawable
        Color whiteColor
        whiteColor:SetColor(255, 255, 255, 255)        

        Drawable square
        square:LoadFilledRectangle(5, 5, whiteColor)
        square:SetPosition(xPos, yPos)
        square:SetCollidable(true)
        square:SetName("barrier")
        return square
    end


    action CreateInvisibleBarrier(integer xPos)
        Layer2D foreground = layers:Get(1)

        // Create Top Invisible Barrier
        integer x = 0
        integer y = 600
        repeat 800 times
            Drawable square = CreateInvisibleBlock(x, y)
            foreground:Add(square)
            x = x + 1
        end

        // Create Bottom Invisible Barrier
        x = 0
        y = 0
        repeat 800 times
            Drawable square = CreateInvisibleBlock(x, y)
            foreground:Add(square)
            x = x + 1
        end

        // Create Left Invisible Barrier
        x = 0
        y = 0
        repeat 600 times
            Drawable square = CreateInvisibleBlock(x, y)
            foreground:Add(square)
            y = y + 1
        end

        // Create Right Invisible Barrier
        x = 800
        y = 0
        repeat 600 times
            Drawable square = CreateInvisibleBlock(x, y)
            foreground:Add(square)
            y = y + 1
        end

    end

    action CreateInvisibleBlock(integer xPos, integer yPos) returns Drawable
        Color whiteColor
        whiteColor:SetColor(255, 255, 255, 255)        

        Drawable square
        
        square:LoadFilledRectangle(5, 5, whiteColor)
        square:SetPosition(xPos, yPos)
        square:SetCollidable(true)
        square:SetName("invisibleBarrier")
        return square
    end
   
    action ClearEnemyRows()
        repeat while rowOne:GetSize() > 0
            rowOne:RemoveFromEnd()
        end

        repeat while rowTwo:GetSize() > 0
            rowTwo:RemoveFromEnd()
        end

        repeat while rowThree:GetSize() > 0
            rowThree:RemoveFromEnd()
        end
    end

    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:A
            leftDown = true
        end

        if event:keyCode = event:D
            rightDown = true
        end

        if event:keyCode = event:Q and gameOver
            Exit()
        end

        if event:keyCode = event:SPACE and instructionsShown
            ClearForeground()
            instructionsShown = false
            SetupBoard()
        elseif event:keyCode = event:R and gameOver
            shipsRemainingInt = 3
            scoreInt = 0
            ClearEnemyRows()
            ClearForeground()
            gameOver = false
            SetupBoard()
        elseif event:keyCode = event:SPACE and not instructionsShown and not gameOver
            and activePlayerProjectileCount < 2
            number xPos = player:GetCenterX()
            number yPos = player:GetY()
            Vector2 vector
            vector:Set(0, 200)
            Drawable projectile
            projectile:LoadFilledRectangle(5, 25)
            projectile:SetColor(255, 0, 0, 255)
            projectile:EnablePhysics(true)
            projectile:SetResponsive()
            projectile:SetName("playerProjectile")
        
            projectile:SetPosition(xPos, yPos + 75)
            Layer2D foreground = layers:Get(1)
            foreground:Add(projectile)
            projectile:SetLinearVelocity(vector)
            activePlayerProjectileCount = activePlayerProjectileCount + 1            
            spaceDown = true
            laserAudio:Play()
        end

    end

   action ReleasedKey(KeyboardEvent event)
       
        if event:keyCode = event:A
            leftDown = false
        end

        if event:keyCode = event:D
            rightDown = false
        end

   end

    action MoveRows()
        MoveSingleRowDown(rowOne)
        MoveSingleRowDown(rowTwo)
        MoveSingleRowDown(rowThree)
    end

    action MoveSingleRowDown(Array<Drawable> enemyRow)
        integer index = 0
        repeat enemyRow:GetSize() times
            Drawable enemy = enemyRow:Get(index)
            number yPos = enemy:GetY()
            yPos = yPos - 50
            enemy:SetY(yPos)

            index = index + 1
        end
    end

    action EnemyShoot(Array<Drawable> enemyRow, Array<Drawable> enemyRowBelow, Random random, boolean hasMoved)
        JavaScriptObjectNotation json        

        integer index = 0
        repeat enemyRow:GetSize() times
            Drawable currentEnemy = enemyRow:Get(index)
            number xPos = currentEnemy:GetCenterX()
            number yPos = currentEnemy:GetY()
            integer randomNum = random:RandomIntegerBetween(0, 180)
            boolean isEnemyBelow = false

            if enemyRowBelow not= undefined
                Drawable enemyBelow = enemyRowBelow:Get(index)
                JavaScriptObjectNotation enemyBelowActive = enemyBelow:GetProperty("active")
                text isEnemyBelowActiveText = enemyBelowActive:GetValue("data")
                isEnemyBelow = cast(boolean, isEnemyBelowActiveText)
            end
            
            if randomNum = 0 and not hasMoved and not isEnemyBelow

                JavaScriptObjectNotation enemyActive = currentEnemy:GetProperty("active")
                
                text isEnemyActiveText = enemyActive:GetValue("data")
                boolean isEnemyActive = cast(boolean, isEnemyActiveText)
                
                if isEnemyActive                    
                    Vector2 vector
                    vector:Set(0, -100)
                    Drawable projectile
                    projectile:LoadFilledRectangle(5, 25)
                    projectile:SetColor(255, 0, 0, 255)
                    projectile:EnablePhysics(true)
                    projectile:SetResponsive()
                    projectile:SetName("projectile")
        
                    projectile:SetPosition(xPos, yPos - 55)
                    Layer2D foreground = layers:Get(1)
                    foreground:Add(projectile)
                    projectile:SetLinearVelocity(vector)    
                end

            end
        
            index = index + 1
        end
    end

    action CheckIfRowAllInactive(Array<Drawable> enemyRow) returns boolean
        boolean isRowAllInactive = true
        integer index = 0
        repeat enemyRow:GetSize() times
            Drawable enemy = enemyRow:Get(index)
            JavaScriptObjectNotation enemyActive = enemy:GetProperty("active")
            text isEnemyActiveText = enemyActive:GetValue("data")
            boolean isEnemyActive = cast(boolean, isEnemyActiveText)

            if isEnemyActive
                isRowAllInactive = false
            end

            index = index + 1
        end

        return isRowAllInactive
    end

    action SetAllEnemiesInRowActive(Array<Drawable> enemyRow, integer yPos)
        JavaScriptObjectNotation activeJson
        activeJson:Add("data", true) 
        
        integer index = 0
        repeat enemyRow:GetSize() times
            Drawable enemy = enemyRow:Get(index)
            number xPos = enemy:GetX()
            enemy:SetProperty("active", activeJson)
            enemy:SetPosition(xPos, yPos)
            enemy:SetCollidable(true)
            Layer2D foreground = layers:Get(1)
            foreground:Add(enemy) 
            index = index + 1
        end
    end

    action handleEnemyExplosions(Array<Drawable> enemyRow, number seconds, text imagePath) returns boolean
        Layer2D foreground = layers:Get(1)
        boolean foundExplodingEnemy = false
        integer index = 0

        repeat enemyRow:GetSize() times
            Drawable enemy = enemyRow:Get(index)
            JavaScriptObjectNotation enemyExplodingJson = enemy:GetProperty("exploding")
            text isEnemyExplodingText = enemyExplodingJson:GetValue("data")
            boolean isEnemyExploding = cast(boolean, isEnemyExplodingText)

            if isEnemyExploding
                foundExplodingEnemy = true
                JavaScriptObjectNotation enemyExplodingTimeJson = enemy:GetProperty("explodingTime")
                text enemyExplodingTimeText = enemyExplodingTimeJson:GetValue("data")
                number enemyExplodingTime = cast(number, enemyExplodingTimeText)
                enemyExplodingTime = enemyExplodingTime + seconds
                JavaScriptObjectNotation updatedEnemyExplodingTimeJson
                updatedEnemyExplodingTimeJson:Add("data", enemyExplodingTime)
                enemy:SetProperty("explodingTime", updatedEnemyExplodingTimeJson)              

                if enemyExplodingTime > 0.0 and enemyExplodingTime < 0.13
                    enemy:Load("assets/explosion0.png")
                elseif enemyExplodingTime > 0.13 and enemyExplodingTime < 0.26
                    enemy:Load("assets/explosion1.png")
                elseif enemyExplodingTime > 0.26 and enemyExplodingTime < 0.39
                    enemy:Load("assets/explosion2.png")
                elseif enemyExplodingTime > 0.39 and enemyExplodingTime < 0.52
                    enemy:Load("assets/explosion3.png")
                elseif enemyExplodingTime > 0.52 and enemyExplodingTime < 0.65
                    enemy:Load("assets/explosion4.png")
                elseif enemyExplodingTime > 0.65 and enemyExplodingTime < 0.75
                    enemy:Load("assets/explosion5.png")
                elseif enemyExplodingTime > 0.78
                    foreground:Remove(enemy)
                    enemy:Load(imagePath)
                    enemy:SetCollidable(true)
                    JavaScriptObjectNotation updatedEnemyExplodingJson
                    updatedEnemyExplodingJson:Add("data", false)
                    enemy:SetProperty("exploding", updatedEnemyExplodingJson)
                    JavaScriptObjectNotation resetEnemyExplodingTimeJson
                    resetEnemyExplodingTimeJson:Add("data", 0.0)
                    enemy:SetProperty("explodingTime", resetEnemyExplodingTimeJson)
        end    

            end

            index = index + 1
        end
        return foundExplodingEnemy
    end

    action handlePlayerExplosion(number seconds)

        if activeExplosion
            explosionSecs = explosionSecs + seconds
        end        

        if explosionSecs > 0.0 and explosionSecs < 0.13
            player:Load("assets/explosion0.png")
        elseif explosionSecs > 0.13 and explosionSecs < 0.26
            player:Load("assets/explosion1.png")
        elseif explosionSecs > 0.26 and explosionSecs < 0.39
            player:Load("assets/explosion2.png")
        elseif explosionSecs > 0.39 and explosionSecs < 0.52
            player:Load("assets/explosion3.png")
        elseif explosionSecs > 0.52 and explosionSecs < 0.65
            player:Load("assets/explosion4.png")
        elseif explosionSecs > 0.65 and explosionSecs < 0.75
            player:Load("assets/explosion5.png")
        elseif explosionSecs > 0.78
            player:Load("assets/Spaceship4.png")
            explosionSecs = 0.0
            activeExplosion = false
        end
    end 

    /*
        The update action is called on every "frame" of animation in a game. This
        action should be used to do operations on items. So, for example, we 
        might use this action to change frames of animation, to rotate items, 
        or to make creatures jump.
    */
    action Update(number seconds)
        Random random
        boolean hasMoved = false

        handlePlayerExplosion(seconds)
        boolean foundExplodingEnemyRowOne = handleEnemyExplosions(rowOne, seconds,"assets/spaceship7.png")
        boolean foundExplodingEnemyRowTwo = handleEnemyExplosions(rowTwo, seconds, "assets/spaceship5.png")
        boolean foundExplodingEnemyRowThree = handleEnemyExplosions(rowThree, seconds, "assets/spaceship.png")

        if CheckIfRowAllInactive(rowOne) and CheckIfRowAllInactive(rowTwo)
            and CheckIfRowAllInactive(rowThree) and not foundExplodingEnemyRowOne
            and not foundExplodingEnemyRowTwo and not foundExplodingEnemyRowThree
            SetAllEnemiesInRowActive(rowOne, 400)
            SetAllEnemiesInRowActive(rowTwo, 450)
            SetAllEnemiesInRowActive(rowThree, 500)
        end

        if shipsRemainingInt <= 0 and not gameOver
            AddGameOver()
        end

        totalSeconds = totalSeconds + seconds

        if totalSeconds >= nextMoveSecs and not gameOver
            MoveRows()
            hasMoved = true
            nextMoveSecs = nextMoveSecs + 10
        end
        
        if (nextMoveSecs - totalSeconds) >= 1 and not hasMoved and not gameOver
            EnemyShoot(rowOne, undefined, random, hasMoved)
            EnemyShoot(rowTwo, rowOne, random, hasMoved)
            EnemyShoot(rowThree, rowTwo, random, hasMoved)
        end

        if rightDown and not gameOver and player:GetX() < 750
            number rectX = player:GetX()
            rectX = rectX + 6
            player:SetX(rectX)
        end

        if leftDown and not gameOver and player:GetX() > 5
            number rectX = player:GetX()
            rectX = rectX - 6
            player:SetX(rectX)
        end
    end
end